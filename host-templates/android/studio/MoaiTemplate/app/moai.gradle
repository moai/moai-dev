

apply plugin: MoaiPlugin



class MoaiPlugin implements Plugin<Project> {
    static def ManifestWarning = '''
        <!--
            !!! DO NOT EDIT THIS FILE !!!!

            It is generated from AndroidManifest.xml.in by combining with modules manifest includes at build time.
            Your changes will be clobbered, edit AndroidManifest.xml.in instead

            !!! DO NOT EDIT THIS FILE !!!!
        -->
    '''
    void apply(Project project) {

        project.task( type: Exec, 'runApp') {
            println("APPID="+project.android.defaultConfig.applicationId)
           def appId = project.android.defaultConfig.applicationId
           if (System.properties['os.name'].toLowerCase().contains('windows')) {
            
              commandLine "cmd", "/c", "adb", "shell", "am","start","-n","$appId/com.getmoai.androidhost.MoaiActivity"
           }
           else {
               commandLine  "adb", "shell", "am","start","-n","$appId/com.getmoai.androidhost.MoaiActivity"
           }
        }
        project.tasks.getByName("runApp").dependsOn('installDebug')

        def libRoot = project.file("../"+project.moaiLibRoot) //gradle properties are one down
        //ndk build task
        project.task( type: Exec, 'libmoaiBuild' )  {
            workingDir project.file('src/main/jni')
            def ndkDir = project.plugins.findPlugin('com.android.application').getNdkFolder()

            def my_modules = project.moaiModules.replaceAll(',',' ')
            def my_flags = project.moaiModules.split(',').findAll { w -> w.trim() != ""}
            my_flags = my_flags.collect {
                i -> i.trim().toUpperCase().replaceAll('-','_').replaceFirst('^MOAI_','-DAKU_WITH_') + "=1"
            }
            def flags = my_flags.join(' ')

            if (System.properties['os.name'].toLowerCase().contains('windows')) {
               def winLibRoot = libRoot.getCanonicalPath().replace('\\','/')
               commandLine "$ndkDir/ndk-build.cmd", "MOAI_LIB_DIR=$winLibRoot", "MOAI_STATIC_LIBRARIES=$my_modules", "MOAI_AKU_FLAGS=$flags"
            }
            else {
                commandLine "$ndkDir/ndk-build", "MOAI_LIB_DIR=$libRoot", "MOAI_STATIC_LIBRARIES=$my_modules", "MOAI_AKU_FLAGS=$flags"
            }
        }

        project.task( type: Delete, 'libmoaiClean' ) {
            def libmoais = project.fileTree('src/main/libs') {
                include '**/libmoai.so'
            }
            delete libmoais
            delete project.file('src/main/obj/local')

        }

        def manifestPermissions = []
        def manifestDeclarations = []

        //combine manifests
        project.task('createCombinedManifest') << {
            println(project.android.defaultConfig.applicationId)

            def uniquePermissions = manifestPermissions.unique(false) {
                a -> a.trim()
            }


            def template = project.file('src/main/AndroidManifest.xml.in')
            if (!template.exists()) {
                throw new Exception("Couldn't find manifest template!")
            }
            def templateLines = template.readLines()

            templateLines.add(1, ManifestWarning)

            def permissionStart = templateLines.findIndexOf { l -> l =~ /EXTERNAL PERMISSIONS/ }
            templateLines.addAll(permissionStart, uniquePermissions)

            def declareStart = templateLines.findIndexOf { l -> l =~ /EXTERNAL DECLARATIONS/ }
            templateLines.addAll(declareStart, manifestDeclarations)
            def outputText = templateLines.join("\n").replace("@PACKAGE@",project.android.defaultConfig.applicationId)

            def output = project.file('src/main/AndroidManifest.xml')
            output.createNewFile()
            output.write(outputText)
        }

        //dependency setup
        project.tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn('libmoaiBuild')
        }

        project.tasks.getByName("clean").dependsOn('libmoaiClean')

        project.tasks.getByName("preBuild").dependsOn('createCombinedManifest')

        //add lua source
        if (project.hasProperty('moaiLuaRoot')) {
            def luaRoot = project.file(project.moaiLuaRoot)
            if (!luaRoot.exists()) luaRoot = project.file('../'+project.moaiLuaRoot) //relative path in gradle.properties is relative to template not project
            project.android.sourceSets.main {
                assets.srcDir luaRoot
            }

        }


        //add moai-android items
        project.android.sourceSets.main {
            java.srcDir new File("${libRoot}/modules/moai/moai-android")
        }

        //add module items
        def modules = project.moaiModules.split(',')

        modules.each { module ->

                if (module == "") return

                def externalPath = "${libRoot}/modules/external/${module}"

                //add our moai binding if present
                def moaif = new File("${libRoot}/modules/moai/${module}")
                if (moaif.exists()) {
                    project.android.sourceSets.main {
                        java.srcDir moaif
                    }
                }

                //add any 3rd party jars
                def f = new File("${externalPath}/lib")
                if (f.exists()) {
                    project.dependencies {
                        compile project.fileTree(dir: f, include: '*.jar')
                    }
                }

                //and any 3rd party source files
                def sourcef = new File("${externalPath}/src")
                if (sourcef.exists()) {
                    project.android.sourceSets.main {
                        println("adding source folder ${sourcef}")
                        java.srcDir sourcef
                        aidl.srcDir sourcef //aidl files go here too
                    }
                }

                //include a project if it has one
                if (project.findProject(":modules:moaiexternal_${module}")) {
                    project.dependencies {
                        compile project.project(":modules:moaiexternal_${module}")
                    }
                }

                //harvest our manifest information
                def maniperm = new File("${externalPath}/manifest_permissions.xml")
                if (maniperm.exists()) {
                    def perms = maniperm.readLines()
                    manifestPermissions.addAll(perms)
                }

                def manidef = new File("${externalPath}/manifest_declarations.xml")
                if (manidef.exists()) {
                    def defs = manidef.readLines()
                    manifestDeclarations.addAll(defs)
                }
        }

    }
}





