

apply plugin: MoaiPlugin



class MoaiPlugin implements Plugin<Project> {

    void apply(Project project) {

        project.task( type: Exec, 'runApp') {
            println("APPID="+project.android.defaultConfig.applicationId)
           def appId = project.android.defaultConfig.applicationId
           if (System.properties['os.name'].toLowerCase().contains('windows')) {
            
              commandLine "cmd", "/c", "adb", "shell", "am","start","-n","$appId/com.moaisdk.core.MoaiActivity"
           }
           else {
               commandLine  "adb", "shell", "am","start","-n","$appId/com.moaisdk.core.MoaiActivity"
           }
        }
        project.tasks.getByName("runApp").dependsOn('installDebug')

        def libRoot = project.file("../"+project.moaiLibRoot) //gradle properties are one down

        //def srcRoot = project.file("../"+project.moaiSrcRoot)
        //ndk build task
        project.task( type: Exec, 'libmoaiBuild' )  {
            workingDir project.file('src/main/jni')
            def ndkDir = project.plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()


            def my_modules = project.moaiModules.replaceAll(","," ")
            def my_flags = project.moaiModules.split(',').findAll { w -> w.trim() != ""}
            my_flags = my_flags.collect {
                i -> i.trim().toUpperCase().replaceAll('-','_').replaceFirst('^MOAI_','-DAKU_WITH_') + "=1"
            }
            def flags = my_flags.join(' ')
            println("Building with flags: ${flags}")
            println("Building with libs: ${my_modules}")
            if (System.properties['os.name'].toLowerCase().contains('windows')) {
               def winLibRoot = libRoot.getCanonicalPath().replace('\\','/')
               commandLine "$ndkDir/ndk-build.cmd", "MOAI_LIB_DIR=$winLibRoot", "MOAI_STATIC_LIBRARIES=$my_modules", "MOAI_AKU_FLAGS=$flags"
            }
            else {
                commandLine "$ndkDir/ndk-build", "MOAI_LIB_DIR=$libRoot", "MOAI_STATIC_LIBRARIES=$my_modules", "MOAI_AKU_FLAGS=$flags"
            }
        }

        project.task( type: Delete, 'libmoaiClean' ) {
            def libmoais = project.fileTree('src/main/libs') {
                include '**/libmoai.so'
            }
            delete libmoais
            delete project.file('src/main/obj/local')

        }

              //dependency setup
        project.tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn('libmoaiBuild')
        }

        project.tasks.getByName("clean").dependsOn('libmoaiClean')


        //add lua source
        if (project.hasProperty('moaiLuaRoot')) {
            def luaRoot = project.file(project.moaiLuaRoot)
            if (!luaRoot.exists()) luaRoot = project.file('../'+project.moaiLuaRoot) //relative path in gradle.properties is relative to template not project
            project.android.sourceSets.main {
                assets.srcDir luaRoot
            }
        }


        //add moai-android items
        project.dependencies {
            compile project.project(":core")
        }

        //add module items
        def modules = project.moaiModules.split(',').collect { i -> i.trim() }
        modules.each { module ->
            if (module == "") return
            //include a project if it has one
            if (project.findProject(":${module}")) {
                project.dependencies {
                    compile project.project(":${module}")
                }
            }
        }


    }
}





