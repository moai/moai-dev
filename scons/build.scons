#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import make_nacl_env
import nacl_utils
import shutil
import os

nacl_env = make_nacl_env.NaClEnvironment(
    use_c_plus_plus_libs=True, 
	nacl_platform=os.getenv('NACL_TARGET_PLATFORM'))
	
fmod_include = os.getenv('FMOD_CHROME_SDK_ROOT') + '/api/inc';
fmod_library = os.getenv('FMOD_CHROME_SDK_ROOT') + '/api/lib/' + os.getenv('NACL_TARGET_PLATFORM') + '/win_x86_newlib/x86-';

Repository ( "../3rdparty", "../src", "../src/host-chrome" )

lua_sources = [ os.path.join( 'lua-5.1.3/src', src_file ) for src_file in [
				  'lapi.c',
				  'lauxlib.c',
				  'lbaselib.c',
				  'lcode.c',
				  'ldblib.c',
				  'ldebug.c',
				  'ldo.c',
				  'ldump.c',
				  'lfunc.c',
				  'lgc.c',
				  'linit.c',
				  'liolib.c',
				  'llex.c',
				  'lmathlib.c',
				  'lmem.c',
				  'loadlib.c',
				  'lobject.c',
				  'lopcodes.c',
				  'loslib.c',
				  'lparser.c',
				  'lstate.c',
				  'lstring.c',
				  'lstrlib.c',
				  'ltable.c',
				  'ltablib.c',
				  'ltm.c',
				  'lundump.c',
				  'lvm.c',
				  'lzio.c',
				  'print.c',
]]

freetype_sources = [ os.path.join( 'freetype-2.4.4/src', src_file ) for src_file in [
					'autofit/autofit.c',
					'bdf/bdf.c',
					'cff/cff.c',
					'base/ftbase.c',
					'base/ftbitmap.c',
					'cache/ftcache.c',
					'base/ftfstype.c',
					'base/ftgasp.c',
					'base/ftglyph.c',
					'gzip/ftgzip.c',
					'base/ftinit.c',
					'lzw/ftlzw.c',
					'base/ftstroke.c',
					'base/ftsystem.c',
					'smooth/smooth.c',
					'base/ftbbox.c',
					'base/ftgxval.c',
					'base/ftlcdfil.c',
					'base/ftmm.c',
					'base/ftotval.c',
					'base/ftpatent.c',
					'base/ftpfr.c',
					'base/ftsynth.c',
					'base/fttype1.c',
					'base/ftwinfnt.c',
					'base/ftxf86.c',
					'pcf/pcf.c',
					'pfr/pfr.c',
					'psaux/psaux.c',
					'pshinter/pshinter.c',
					'psnames/psmodule.c',
					'raster/raster.c',
					'sfnt/sfnt.c',
					'truetype/truetype.c',
					'type1/type1.c',
					'cid/type1cid.c',
					'type42/type42.c',
					'winfonts/winfnt.c',
]]

zlib_sources = [ os.path.join( 'zlib-1.2.3', src_file ) for src_file in [
					'adler32.c'   ,
					'compress.c'  ,
					'crc32.c'     ,
					'deflate.c'   ,
					'gzio.c'      ,
					'infback.c'   ,
					'inffast.c'   ,
					'inflate.c'   ,
					'inftrees.c'  ,
					'trees.c'     ,
					'uncompr.c'   ,
					'zutil.c'     ,
]]

sfmt_sources = [ os.path.join( 'sfmt-1.4', src_file ) for src_file in [
					'SFMT.c',
]]

tinyxml_sources = [ os.path.join( 'tinyxml', src_file ) for src_file in [
					'tinystr.cpp',
					'tinyxml.cpp',
					'tinyxmlerror.cpp',
					'tinyxmlparser.cpp',
]]

jansson_sources = [ os.path.join( 'jansson-2.1/src', src_file ) for src_file in [
					'dump.c',
					'error.c',
					'hashtable.c',
					'load.c',
					'memory.c',
					'pack_unpack.c',
					'strbuffer.c',
					'utf.c',
					'value.c',
]]

expat_sources = [ os.path.join( 'expat-2.0.1/lib', src_file ) for src_file in [
					'xmlparse.c',
					'xmlrole.c',
					'xmltok.c',
					'xmltok_impl.c',
					'xmltok_ns.c',
]]

libpng_sources = [ os.path.join( 'lpng140', src_file ) for src_file in [
					'example.c' ,
					'png.c'     ,
					'pngerror.c',
					'pngget.c'  ,
					'pngmem.c'  ,
					'pngpread.c',
					'pngread.c' ,
					'pngrio.c'  ,
					'pngrtran.c',
					'pngrutil.c',
					'pngset.c'  ,
					'pngtrans.c',
					'pngwio.c'  ,
					'pngwrite.c',
					'pngwtran.c',
					'pngwutil.c',
]]

libjpg_sources = [ os.path.join( 'jpeg-8c', src_file ) for src_file in [
					'jcapimin.c'	,
					'jcapistd.c'	,
					'jdapimin.c'	,
					'jdapistd.c'	,
					'jcomapi.c'	    ,
					'jcparam.c'	    ,
					'jctrans.c'	    ,
					'jdtrans.c'	    ,
					'jcinit.c'	    ,
					'jcmaster.c'	,
					'jcmainct.c'	,
					'jcprepct.c'	,
					'jccoefct.c'	,
					'jccolor.c'	    ,
					'jcsample.c'	,
					'jcdctmgr.c'	,
					'jfdctint.c'	,
					'jfdctfst.c'	,
					'jfdctflt.c'	,
					'jchuff.c'	    ,
					'jcarith.c'	    ,
					'jcmarker.c'	,
					'jdatadst.c'	,
					'jdmaster.c'	,
					'jdinput.c'	    ,
					'jdmainct.c'	,
					'jdcoefct.c'	,
					'jdpostct.c'	,
					'jdmarker.c'	,
					'jdhuff.c'	    ,
					'jdarith.c'	    ,
					'jddctmgr.c'	,
					'jidctint.c'	,
					'jidctfst.c'	,
					'jidctflt.c'	,
					'jdsample.c'	,
					'jdcolor.c'	    ,
					'jdmerge.c'	    ,
					'jquant1.c'	    ,
					'jquant2.c'	    ,
					'jdatasrc.c'	,
					'jaricom.c'	    ,
					'jerror.c'	    ,
					'jmemmgr.c'	    ,
					'jutils.c'	    ,
					'jmemnobs.c'	,
]]

contrib_sources = [ os.path.join( 'contrib', src_file ) for src_file in [
					'utf8.c' ,
					#'whirlpool.c',
]]

tlsf_sources = [ os.path.join( 'tlsf-2.0', src_file ) for src_file in [
					'tlsf.c' ,
]]

zlcore_sources = [ os.path.join( src_file ) for src_file in [
          'zl-gfx/zl_gfx_opengl.cpp',
					'zl-vfs/zl_mutex.cpp',
					'zl-vfs/zl_util.cpp',
					'zl-vfs/zl_vfscanf.cpp',
					'zl-vfs/pch.cpp',
					'zl-vfs/headers.cpp',
					'zl-vfs/ZLVfsDirectoryItr.cpp',
					'zl-vfs/ZLVfsFile.cpp',
					'zl-vfs/ZLVfsFileSystem.cpp',
					'zl-vfs/ZLVfsVirtualPath.cpp',
					'zl-vfs/ZLVfsZipArchive.cpp',
					'zl-vfs/ZLVfsZipStream.cpp',
					'zl-util/STLString.cpp'           ,
					'zl-util/ZLAdapterInfo_posix.cpp' ,					
					'zl-util/ZLBase64Reader.cpp'	  ,
					'zl-util/ZLBase64Writer.cpp'	  ,
					'zl-util/ZLBase64Encoder.cpp'	  ,
					'zl-util/ZLBox.cpp'               ,
					'zl-util/ZLByteStream.cpp'        ,
					'zl-util/ZLCgt.cpp'               ,
					'zl-util/ZLColor.cpp'             ,
					'zl-util/ZLCurve.cpp'             ,
					'zl-util/ZLDeflateReader.cpp'	  ,
					'zl-util/ZLDeflateWriter.cpp'	  ,
					'zl-util/ZLDeviceTime_nacl.cpp'   ,
					'zl-util/ZLDirectoryItr.cpp'	  ,
					'zl-util/ZLDistance.cpp'          ,
					'zl-util/ZLFileStream.cpp'        ,
					'zl-util/ZLFileSys.cpp'           ,
					'zl-util/ZLFrustum.cpp'			  ,
					'zl-util/ZLHashedString.cpp',
					#'zl-util/ZLHashWriterWhirlpool.cpp',
					'zl-util/ZLHashWriterSHA512.cpp'  ,
					'zl-util/ZLHashWriterSHA384.cpp'  ,
					'zl-util/ZLHashWriterSHA256.cpp'  ,
					'zl-util/ZLHashWriterSHA224.cpp'  ,
					'zl-util/ZLHashWriterSHA1.cpp'	  ,
					'zl-util/ZLHashWriterMD5.cpp'	  ,
					'zl-util/ZLHashWriterCRC32.cpp'	  ,
					'zl-util/ZLHashWriterAdler32.cpp' ,
					'zl-util/ZLHashWriter.cpp'     	  ,
					'zl-util/ZLHexWriter.cpp'     	  ,
					'zl-util/ZLHexReader.cpp'         ,
					'zl-util/ZLHexDump.cpp'			  ,
					'zl-util/ZLInterpolate.cpp'       ,
					'zl-util/ZLIntersect.cpp'         ,
					'zl-util/ZLLexStream.cpp'         ,
					'zl-util/ZLLog.cpp'               ,
					'zl-util/pch.cpp'        ,				
					'zl-util/ZLMemStream.cpp'         ,
					'zl-util/ZLMercator.cpp'          ,
					'zl-util/ZLParser.cpp'            ,
					'zl-util/ZLPlane.cpp'             ,
					'zl-util/ZLPolar.cpp'             ,
					'zl-util/ZLPrism.cpp'             ,
					'zl-util/ZLQuad.cpp'              ,
					'zl-util/ZLQuadCoord.cpp'         ,
					'zl-util/ZLQuaternion.cpp'		  ,
					'zl-util/ZLRhombus.cpp'			  ,
					'zl-util/ZLStream.cpp'            ,
					'zl-util/ZLStreamReader.cpp'      ,
					'zl-util/ZLStreamWriter.cpp'      ,
					'zl-util/ZLSurface2D.cpp'         ,
					'zl-util/ZLSyntaxNode.cpp'        ,
					'zl-util/ZLSyntaxScanner.cpp'     ,
					'zl-util/ZLTrig.cpp'              ,
					'zl-util/ZLTypedPtr.cpp'          ,
					'zl-util/ZLUnique_linux.cpp'      ,
					'zl-util/ZLXmlReader.cpp'         ,					
					'zl-util/ZLZip.cpp'               ,
					'zl-util/ZLZipFile.cpp'           ,

]]

box2d_path = os.path.join( 'box2d-2.2.1', 'Box2D' )
box2d_sources = [ os.path.join( box2d_path, src_file ) for src_file in [
					'Collision/b2BroadPhase.cpp',
					'Collision/b2CollideCircle.cpp',
					'Collision/b2CollideEdge.cpp',
					'Collision/b2CollidePolygon.cpp',
					'Collision/b2Collision.cpp',
					'Collision/b2Distance.cpp',
					'Collision/b2DynamicTree.cpp',
					'Collision/b2TimeOfImpact.cpp',
					'Collision/Shapes/b2ChainShape.cpp',
					'Collision/Shapes/b2CircleShape.cpp',
					'Collision/Shapes/b2EdgeShape.cpp',
					'Collision/Shapes/b2PolygonShape.cpp',
					'Common/b2BlockAllocator.cpp',
					'Common/b2Draw.cpp',
					'Common/b2Math.cpp',
					'Common/b2Settings.cpp',
					'Common/b2StackAllocator.cpp',
					'Common/b2Timer.cpp',
					'Dynamics/b2Body.cpp',
					'Dynamics/b2ContactManager.cpp',
					'Dynamics/b2Fixture.cpp',
					'Dynamics/b2Island.cpp',
					'Dynamics/b2World.cpp',
					'Dynamics/b2WorldCallbacks.cpp',
					'Dynamics/Joints/b2DistanceJoint.cpp',
					'Dynamics/Joints/b2FrictionJoint.cpp',
					'Dynamics/Joints/b2GearJoint.cpp',
					'Dynamics/Joints/b2Joint.cpp',
					'Dynamics/Joints/b2MouseJoint.cpp',
					'Dynamics/Joints/b2PrismaticJoint.cpp',
					'Dynamics/Joints/b2PulleyJoint.cpp',
					'Dynamics/Joints/b2RevoluteJoint.cpp',
					'Dynamics/Joints/b2RopeJoint.cpp',
					'Dynamics/Joints/b2WeldJoint.cpp',
					'Dynamics/Joints/b2WheelJoint.cpp',
					'Dynamics/Contacts/b2ChainAndCircleContact.cpp',
					'Dynamics/Contacts/b2ChainAndPolygonContact.cpp',
					'Dynamics/Contacts/b2CircleContact.cpp',
					'Dynamics/Contacts/b2Contact.cpp',
					'Dynamics/Contacts/b2ContactSolver.cpp',
					'Dynamics/Contacts/b2EdgeAndCircleContact.cpp',
					'Dynamics/Contacts/b2EdgeAndPolygonContact.cpp',
					'Dynamics/Contacts/b2PolygonAndCircleContact.cpp',
					'Dynamics/Contacts/b2PolygonContact.cpp',
					'Rope/b2Rope.cpp',
]]

moai_sources = [ os.path.join(src_file) for src_file in [
        'moai-core/host.cpp',
        'moai-sim/host.cpp',
			  'moai-sim/MOAIAction.cpp'                 ,
				'moai-sim/MOAIActionMgr.cpp'              ,
				'moai-sim/MOAIAnim.cpp'                   ,
				'moai-sim/MOAIAnimCurve.cpp'              ,
				'moai-sim/MOAIAnimCurveBase.cpp'          ,
				'moai-sim/MOAIAnimCurveQuat.cpp'			     ,
				'moai-sim/MOAIAnimCurveVec.cpp'			     ,
				'moai-sim/MOAIBitmapFontReader.cpp'       ,
				'moai-sim/MOAIBlendMode.cpp'              ,
				'moai-sim/MOAIBlocker.cpp'                ,
				'moai-sim/MOAIBoundsDeck.cpp'             ,
				'moai-box2d/MOAIBox2DArbiter.cpp'           ,
				'moai-box2d/MOAIBox2DBody.cpp'              ,
				'moai-box2d/MOAIBox2DDebugDraw.cpp'         ,
				'moai-box2d/MOAIBox2DDistanceJoint.cpp'	   ,
				'moai-box2d/MOAIBox2DFixture.cpp'           ,
				'moai-box2d/MOAIBox2DFrictionJoint.cpp'	   ,
				'moai-box2d/MOAIBox2DGearJoint.cpp'		     ,
				'moai-box2d/MOAIBox2DJoint.cpp'          	 ,
				'moai-box2d/MOAIBox2DMouseJoint.cpp'        ,
				'moai-box2d/MOAIBox2DPrismaticJoint.cpp'    ,
				'moai-box2d/MOAIBox2DPulleyJoint.cpp'       ,
				'moai-box2d/MOAIBox2DRevoluteJoint.cpp'     ,
				'moai-box2d/MOAIBox2DRopeJoint.cpp'     	   ,
				'moai-box2d/MOAIBox2DWeldJoint.cpp'         ,
				'moai-box2d/MOAIBox2DWheelJoint.cpp'		     ,
				'moai-box2d/MOAIBox2DWorld.cpp'             ,
				'moai-sim/MOAIButtonSensor.cpp'           ,
				'moai-sim/MOAICamera.cpp'         		     ,
				'moai-sim/MOAICameraAnchor2D.cpp'         ,
				'moai-sim/MOAICameraFitter2D.cpp'         ,
				'moai-core/MOAICanary.cpp'				         ,
				'moai-sim/MOAIColor.cpp'                  ,
				'moai-sim/MOAICompassSensor.cpp'          ,
				'moai-core/pch.cpp'               ,
#				'moai-chipmunk/MOAICp.cpp'                     ,
#				'moai-chipmunk/MOAICpArbiter.cpp'              ,
#				'moai-chipmunk/MOAICpBody.cpp'                 ,
#				'moai-chipmunk/MOAICpConstraint.cpp'           ,
#				'moai-chipmunk/MOAICpDebugDraw.cpp'            ,
#				'moai-chipmunk/MOAICpShape.cpp'                ,
#				'moai-chipmunk/MOAICpSpace.cpp'                ,
				'moai-util/MOAIDataIOTask.cpp'             ,
				'moai-util/MOAIDataBuffer.cpp'             ,
				'moai-util/MOAIDataBufferStream.cpp'       ,
				'moai-sim/MOAIDebugLines.cpp'             ,
				'moai-sim/MOAIDeck.cpp'                   ,
				'moai-sim/MOAIDeckRemapper.cpp'           ,
				'moai-core/MOAIDeserializer.cpp'           ,
				'moai-sim/MOAIDraw.cpp'                   ,
				'moai-sim/MOAIEaseDriver.cpp'             ,
				'moai-sim/MOAIEaseType.cpp'               ,
				'moai-sim/MOAIEnvironment.cpp'            ,
				'moai-core/MOAIEventSource.cpp'            ,
				'moai-util/MOAIFileStream.cpp'			       ,
				'moai-util/MOAIFileSystem.cpp'             ,
				'moai-sim/MOAIFont.cpp'                   ,
				'moai-sim/MOAIFont_bmfont.cpp'            ,
				'moai-sim/MOAIFontReader.cpp'       		   ,
				'moai-sim/MOAIFrameBuffer.cpp'            ,
				'moai-sim/MOAIFrameBufferTexture.cpp'     ,
				'moai-sim/MOAIFreeTypeFontReader.cpp'	   ,
				'moai-sim/MOAIGfxDevice.cpp'              ,
				'moai-sim/MOAIGfxQuad2D.cpp'              ,
				'moai-sim/MOAIGfxQuadDeck2D.cpp'          ,
				'moai-sim/MOAIGfxQuadListDeck2D.cpp'      ,
				'moai-sim/MOAIGfxResource.cpp'            ,
				'moai-core/MOAIGlobals.cpp'           	   ,
				'moai-sim/MOAIGlyph.cpp'                  ,
				'moai-sim/MOAIGlyphCache.cpp'             ,
				'moai-sim/MOAIGlyphCacheBase.cpp'         ,
				'moai-sim/MOAIGlyphCachePage.cpp'         ,
				'moai-sim/MOAIGlyphSet.cpp'               ,
				'moai-sim/MOAIGrid.cpp'                   ,
				'moai-sim/MOAIGridDeck2D.cpp'             ,
				'moai-sim/MOAIGridPathGraph.cpp'			     ,
				'moai-sim/MOAIGridSpace.cpp'              ,
				'moai-util/MOAIHashWriter.cpp'             ,
				'moai-http-client/MOAIHttpTaskBase.cpp'           ,
				'moai-http-client/MOAIHttpTaskNaCl.cpp' 	 		     ,
				'moai-sim/MOAIImage.cpp'                  ,
				'moai-sim/MOAIImageTexture.cpp'           ,
				'moai-sim/MOAIImage-jpg.cpp'              ,
				'moai-sim/MOAIImage-png.cpp'              ,
				'moai-sim/MOAIIndexBuffer.cpp'            ,
				'moai-sim/MOAIInputDevice.cpp'            ,
				'moai-sim/MOAIInputMgr.cpp'               ,
				'moai-sim/MOAIJoystickSensor.cpp'         ,
				'moai-util/MOAIJsonParser.cpp'             ,
				'moai-sim/MOAIKeyboardSensor.cpp'         ,
				'moai-sim/MOAILayer.cpp'                	 ,
				'moai-sim/MOAILayerBridge.cpp'            ,
				'moai-sim/MOAILayoutFrame.cpp'            ,
				'moai-sim/MOAILocationSensor.cpp'         ,
				'moai-core/MOAILogMessages.cpp'            ,
				'moai-core/MOAILogMgr.cpp'                 ,
				'moai-core/MOAILuaObject.cpp'         	   ,
				'moai-core/MOAILuaRef.cpp'            	   ,
				'moai-core/MOAILuaRuntime.cpp'        	   ,
				'moai-core/MOAILuaState.cpp'          	   ,
				'moai-core/MOAIScopedLuaState.cpp'    	   ,
				'moai-util/MOAIMath.cpp'                   ,
				'moai-sim/MOAIMesh.cpp'                   ,
				'moai-util/MOAIMemStream.cpp'              ,
				'moai-sim/MOAIMotionSensor.cpp'           ,
				'moai-sim/MOAIMultiTexture.cpp'			     ,
				'moai-util/MOAIMutex.cpp'                  ,
				'moai-util/MOAIMutex_posix.cpp'            ,
				'moai-sim/MOAINode.cpp'                   ,
				'moai-sim/MOAINodeMgr.cpp'                ,
				'moai-core/MOAIObject.cpp'            	   ,
				'moai-util/MOAIParser.cpp'                 ,
				'moai-sim/MOAIParticleCallbackPlugin.cpp' ,
				'moai-sim/MOAIParticleDistanceEmitter.cpp',
				'moai-sim/MOAIParticleEmitter.cpp'        ,
				'moai-sim/MOAIParticleForce.cpp'          ,
				'moai-sim/MOAIParticlePexPlugin.cpp'		   ,
				'moai-sim/MOAIParticlePlugin.cpp'         ,
				'moai-sim/MOAIParticleScript.cpp'         ,
				'moai-sim/MOAIParticleState.cpp'          ,
				'moai-sim/MOAIParticleSystem.cpp'         ,
				'moai-sim/MOAIParticleTimedEmitter.cpp'   ,
				'moai-sim/MOAIPartition.cpp'              ,
				'moai-sim/MOAIPartitionCell.cpp'          ,
				'moai-sim/MOAIPartitionLevel.cpp'         ,
				'moai-sim/MOAIPartitionResultBuffer.cpp'  ,
				'moai-sim/MOAIPartitionResultMgr.cpp'     ,
				'moai-sim/MOAIPathFinder.cpp'			       ,
				'moai-sim/MOAIPathGraph.cpp'				       ,
				'moai-sim/MOAIPathTerrainDeck.cpp'		     ,
				'moai-sim/MOAIPointerSensor.cpp'          ,
				'moai-sim/MOAIProp.cpp'                   ,
				'moai-sim/MOAIQuadBrush.cpp'              ,
				'moai-sim/MOAIRenderMgr.cpp'              ,
				'moai-sim/MOAIRenderable.cpp'             ,
				'moai-core/MOAIRtti.cpp'              	   ,
				'moai-sim/MOAIScissorRect.cpp'			       ,
				'moai-sim/MOAIScriptDeck.cpp'             ,
				'moai-sim/MOAIScriptNode.cpp'             ,
				'moai-sim/MOAISensor.cpp'                 ,
				'moai-core/MOAISerializer.cpp'             ,
				'moai-core/MOAISerializerBase.cpp'         ,
				'moai-sim/MOAIShader.cpp'                 ,
				'moai-sim/MOAIShaderMgr.cpp'              ,
				'moai-sim/MOAISim.cpp'                    ,
				'moai-sim/MOAIStaticGlyphCache.cpp'       ,
				'moai-sim/MOAIStretchPatch2D.cpp'         ,
				'moai-util/MOAIStream.cpp'				         ,
				'moai-util/MOAIStreamReader.cpp'			     ,
				'moai-util/MOAIStreamWriter.cpp'			     ,
				'moai-sim/MOAISurfaceDeck2D.cpp'          ,
				'moai-sim/MOAISurfaceSampler2D.cpp'       ,
				'moai-util/MOAITask.cpp'              		 ,
				'moai-util/MOAITaskQueue.cpp'							 ,
				'moai-util/MOAITaskThread.cpp'        		 ,
				'moai-util/MOAITaskSubscriber.cpp'				 ,
				'moai-sim/MOAITextBox.cpp'                ,
				'moai-sim/MOAITextBundle.cpp'			       ,
				'moai-sim/MOAITextDesigner.cpp'           ,
				'moai-sim/MOAITextStyle.cpp'              ,
				'moai-sim/MOAITextStyler.cpp'             ,
				'moai-sim/MOAITexture.cpp'                ,
				'moai-sim/MOAITextureBase.cpp'            ,
				'moai-util/MOAIThread.cpp'            		 ,
				'moai-util/MOAIThread_posix.cpp'      		 ,
				'moai-sim/MOAICoroutine.cpp'              ,
				'moai-sim/MOAITileDeck2D.cpp'             ,
				'moai-sim/MOAITileFlags.cpp'              ,
				'moai-sim/MOAITimer.cpp'                  ,
				'moai-sim/MOAITouchSensor.cpp'            ,
				'moai-sim/MOAITransform.cpp'              ,
				'moai-sim/MOAITransformBase.cpp'          ,
				'moai-http-client/MOAIUrlMgrNaCl.cpp'       	 	   ,
				'moai-sim/MOAIVecPathGraph.cpp'           ,
				'moai-core/MOAIVersion.cpp'               ,
				'moai-sim/MOAIVertexBuffer.cpp'           ,
				'moai-sim/MOAIVertexFormat.cpp'           ,
				'moai-sim/MOAIVertexFormatMgr.cpp'        ,
				'moai-sim/MOAIViewport.cpp'               ,
				'moai-sim/MOAIWheelSensor.cpp'            ,
				'moai-util/MOAIXmlParser.cpp'              ,
]]

moaiextuntz_sources = [ os.path.join('moai-untz', src_file) for src_file in [ 
				'MOAIUntzSystem.cpp'              ,
]]
		
moaiextfmod_sources = [ os.path.join('moai-fmod-ex', src_file) for src_file in [ 
        'host.cpp',
				'MOAIFmodEx.cpp'              ,
				'MOAIFmodExChannel.cpp'       ,
				'MOAIFmodExSound.cpp'         ,
]]

nacl_moai_sources = [  'NaClHost.cpp',
				 'geturl_handler.cc',
				 'NaClFileSystem.cpp',
				 'NaClFile.cpp',
				 'opengl_context.cc',
				 'MOAIApp.cpp',
				 ]

sources = nacl_moai_sources + zlib_sources + sfmt_sources + tinyxml_sources + libjpg_sources + jansson_sources + tlsf_sources + expat_sources + libpng_sources + contrib_sources + zlcore_sources + box2d_sources + moaiextfmod_sources + moai_sources

nacl_env.Append ( LIBS=['m','nacl_dyncode','c', 'g', 'nacl', 'ppapi_gles2','fmodex', 'ppapi', 'ppapi_cpp', 'pthread', 'nosys' ] )

nacl_env.Append ( CPPDEFINES=['MOAI_OS_NACL','HAVE_MEMMOVE','__linux', 'NACL', 'MOAI_WITH_LIBCURL=0', 'MOAI_WITH_LIBCRYPTO=0', 'MOAI_WITH_CHIPMUNK=0','USE_OPENGLES1=0','MOAI_WITH_SQLITE=0', 'MOAI_WITH_OPENSSL=0','FT2_BUILD_LIBRARY'] )

nacl_env["CPPPATH"] = [ 'lua-5.1.3/src', 
						'ooid-0.99',
            'box2d-2.2.1', 
						'chipmunk-5.3.4/include', 
						'physfs-2.0.2',
						'sqlite-3.6.16',
						'expat-2.0.1/lib',
						'tinyxml',
						'lpng140',
						'zlib-1.2.3',
						'hmac_sha1',
						'jansson-2.1/src',
						fmod_include,
						'openssl-1.0.0d/include-android',
						'openssl-1.0.0d/crypto',
						'freetype-2.4.4/include',
						'tlsf-2.0',
						'sfmt-1.4',
						'jpeg-8c',
						'zl-vfs',
						'config-default',
						'.' ]

nacl_env.Append ( LIBPATH = ['lib-x86-32/opt','lib-x86-64/opt','x86-32','x86-64',fmod_library+'32', fmod_library+'64'] )

nacl_env.NaClStaticLibraries ( zlib_sources, 'zlib', is_debug=False )
nacl_env.Append ( LIBS=[ 'zlib' ] )

nacl_env.Append ( CCFLAGS = ['-include','zl_replace.h'] )

nacl_env.NaClStaticLibraries ( box2d_sources, 'box2d', is_debug=False )
nacl_env.NaClStaticLibraries ( sfmt_sources, 'sfmt', is_debug=False )
nacl_env.NaClStaticLibraries ( tinyxml_sources, 'tinyxml', is_debug=False )
nacl_env.NaClStaticLibraries ( libjpg_sources, 'libjpg', is_debug=False )
nacl_env.NaClStaticLibraries ( jansson_sources, 'jansson', is_debug=False )

nacl_env.NaClStaticLibraries ( expat_sources, 'expat', is_debug=False )
nacl_env.NaClStaticLibraries ( libpng_sources, 'libpng', is_debug=False )
nacl_env.NaClStaticLibraries ( contrib_sources, 'contrib', is_debug=False )
nacl_env.NaClStaticLibraries ( lua_sources, 'lua', is_debug=False )
nacl_env.NaClStaticLibraries ( freetype_sources, 'freetype', is_debug=False )

nacl_env.FilterOut ( CCFLAGS = ['-include','zl_replace.h'] )
nacl_env.FilterOut( LIBS=['nosys'] )
nacl_env.Append ( LIBS=['zlib','freetype','box2d','lua','sfmt','tinyxml','libjpg','jansson','expat','libpng','contrib','lua','nosys'] )

module_name = 'moai'
opt_nexes = nacl_env.NaClModules( tlsf_sources + zlcore_sources + moaiextfmod_sources + moai_sources + nacl_moai_sources , module_name, is_debug=False )

nacl_env.GenerateNmf(target='%s.nmf' % module_name,
			  source=opt_nexes,
			  nexes={'x86-32': '%s_x86_32.nexe' % module_name,
					 'x86-64': '%s_x86_64.nexe' % module_name})
